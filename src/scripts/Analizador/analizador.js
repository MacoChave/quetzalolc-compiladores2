/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,24],$V2=[1,44],$V3=[1,25],$V4=[1,27],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,45],$Vb=[1,46],$Vc=[1,48],$Vd=[1,49],$Ve=[1,50],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[2,5,28,29,32,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VJ=[2,25],$VK=[1,75],$VL=[2,67],$VM=[1,90],$VN=[44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,71,79,92,93],$VO=[2,66],$VP=[1,92],$VQ=[1,91],$VR=[1,97],$VS=[1,101],$VT=[1,107],$VU=[1,108],$VV=[1,109],$VW=[1,110],$VX=[1,111],$VY=[1,112],$VZ=[1,113],$V_=[1,114],$V$=[1,115],$V01=[1,116],$V11=[1,117],$V21=[1,118],$V31=[1,119],$V41=[1,120],$V51=[1,121],$V61=[1,122],$V71=[1,123],$V81=[29,37,67,71],$V91=[2,32],$Va1=[37,51,67,71],$Vb1=[2,34],$Vc1=[2,35],$Vd1=[2,5,27,28,29,31,32,33,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,69,71,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Ve1=[29,71],$Vf1=[2,5,27,28,29,32,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vg1=[2,38],$Vh1=[1,138],$Vi1=[2,5,27,28,29,32,37,39,40,41,42,43,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vj1=[1,152],$Vk1=[2,5,27,28,29,31,32,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vl1=[1,179],$Vm1=[1,180],$Vn1=[1,181],$Vo1=[2,5,27,28,29,31,32,33,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vp1=[2,5,27,28,29,31,32,33,37,39,40,41,42,43,55,56,57,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vq1=[1,186],$Vr1=[33,69],$Vs1=[1,190],$Vt1=[31,33],$Vu1=[1,197],$Vv1=[1,201],$Vw1=[2,5,28,29,32,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,76,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vx1=[2,5,27,28,29,31,32,33,37,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vy1=[2,5,27,28,29,31,32,33,37,39,40,41,42,43,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vz1=[27,29,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VA1=[37,51,67],$VB1=[1,225],$VC1=[2,122],$VD1=[1,263],$VE1=[1,262],$VF1=[88,90,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"DECLARACION":8,"FINISHLINEA":9,"ASIGNACION":10,"CONDICIONIF":11,"CONDICIONWHILE":12,"CONDICIONDOWHILE":13,"CONDBREAK":14,"CODCONTINUE":15,"CONDRETURN":16,"CONDSWITCH":17,"CONDINCREMENTO":18,"CONDECREMENTO":19,"CONDFOR":20,"METODOS":21,"LLAMADA":22,"EJECUTAR":23,"FUNCIONES":24,"VECTORES":25,"ASIGVECTORES":26,"PTCOMA":27,"RESPRINT":28,"PARABRE":29,"IMPRIMIR_ARGS":30,"PARCIERRA":31,"RESPRINTLN":32,"COMA":33,"EXPRESION":34,"TIPODATO":35,"LISTAIDENTIFICADORES":36,"IDENTIFICADOR":37,"IGUAL":38,"RESINT":39,"RESCHAR":40,"RESBOOL":41,"RESDOUBLE":42,"RESSTRING":43,"MAS":44,"MENOS":45,"POR":46,"DIVI":47,"MOD":48,"COMPARACION":49,"DIFERENTE":50,"MAYOR":51,"MENOR":52,"MAYORIGUAL":53,"MENORIGUAL":54,"AND":55,"OR":56,"NOT":57,"CONCAD":58,"DUPLI":59,"IFTERNARIO":60,"ENTERO":61,"DECIMAL":62,"CADENA":63,"BOOLEANO":64,"CARACTER":65,"RESNULO":66,"CORCHABRE":67,"LISTAVALORES":68,"CORCHCIERRA":69,"ACCESOVECTOR":70,"PUNTO":71,"FUNCNATIVA":72,"RESPARSE":73,"RESIF":74,"BLOQUEINSTRUCCION":75,"RESELSE":76,"RESWHILE":77,"RESDO":78,"INTERROGACION":79,"DOSPUNTOS":80,"RESBREAK":81,"RESCONTINUE":82,"RESRETURN":83,"RESSWITCH":84,"LLAVEABRE":85,"LISTACASOS":86,"DEFECTO":87,"LLAVECIERRA":88,"CASO":89,"RESCASE":90,"RESDEFAULT":91,"MASINC":92,"MENOSDES":93,"RESFOR":94,"DECLASIG":95,"ACTUALIZACION":96,"FUNCMAIN":97,"RESVOID":98,"RESMAIN":99,"PARAMETROS":100,"RESLIST":101,"PARLLAMADA":102,"RESEXEC":103,"RESNUEVO":104,"RESLOW":105,"RESUP":106,"RESLENG":107,"RESCAROFPOS":108,"RESTYPE":109,"RESTOINT":110,"RESTODOU":111,"RESSUBSTRING":112,"RESSTRINGNATIVA":113,"RESSIN":114,"RESLOG":115,"RESCOS":116,"RESTAN":117,"RESSQRT":118,"RESPOW":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",27:"PTCOMA",28:"RESPRINT",29:"PARABRE",31:"PARCIERRA",32:"RESPRINTLN",33:"COMA",37:"IDENTIFICADOR",38:"IGUAL",39:"RESINT",40:"RESCHAR",41:"RESBOOL",42:"RESDOUBLE",43:"RESSTRING",44:"MAS",45:"MENOS",46:"POR",47:"DIVI",48:"MOD",49:"COMPARACION",50:"DIFERENTE",51:"MAYOR",52:"MENOR",53:"MAYORIGUAL",54:"MENORIGUAL",55:"AND",56:"OR",57:"NOT",58:"CONCAD",59:"DUPLI",61:"ENTERO",62:"DECIMAL",63:"CADENA",64:"BOOLEANO",65:"CARACTER",66:"RESNULO",67:"CORCHABRE",69:"CORCHCIERRA",71:"PUNTO",73:"RESPARSE",74:"RESIF",76:"RESELSE",77:"RESWHILE",78:"RESDO",79:"INTERROGACION",80:"DOSPUNTOS",81:"RESBREAK",82:"RESCONTINUE",83:"RESRETURN",84:"RESSWITCH",85:"LLAVEABRE",88:"LLAVECIERRA",90:"RESCASE",91:"RESDEFAULT",92:"MASINC",93:"MENOSDES",94:"RESFOR",98:"RESVOID",99:"RESMAIN",101:"RESLIST",103:"RESEXEC",104:"RESNUEVO",105:"RESLOW",106:"RESUP",107:"RESLENG",108:"RESCAROFPOS",109:"RESTYPE",110:"RESTOINT",111:"RESTODOU",112:"RESSUBSTRING",113:"RESSTRINGNATIVA",114:"RESSIN",115:"RESLOG",116:"RESCOS",117:"RESTAN",118:"RESSQRT",119:"RESPOW"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[9,1],[9,0],[7,5],[7,5],[30,3],[30,1],[8,2],[8,4],[35,1],[35,1],[35,1],[35,1],[35,1],[36,3],[36,1],[10,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,1],[34,1],[34,1],[34,5],[34,6],[34,8],[34,6],[34,4],[34,6],[34,6],[11,5],[11,7],[11,7],[12,5],[13,7],[60,5],[14,2],[15,2],[16,1],[16,2],[17,8],[17,7],[17,7],[86,2],[86,1],[89,4],[87,3],[18,2],[19,2],[20,9],[95,1],[95,1],[96,1],[96,1],[96,1],[97,5],[21,6],[21,5],[100,4],[100,6],[100,7],[100,4],[100,5],[100,2],[22,4],[22,3],[102,3],[102,1],[23,5],[23,4],[24,6],[24,5],[25,10],[25,8],[68,3],[68,1],[70,4],[26,6],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[75,3],[75,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 89:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 90:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 13: case 16: case 17: case 20: case 58: case 67: case 68: case 96: case 97: case 98: case 99: case 100: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141:
this.$=$$[$0];
break;
case 5: case 6: case 12: case 14: case 15: case 18: case 19: case 21: case 22: case 45: case 65: case 142:
this.$=$$[$0-1];
break;
case 23:

                                            // inicio.listaErrores.push(new errores.default('ERROR SINTACTICO',"Se esperaba un token en esta linea",_$[$0-1].first_line,_$[$0-1].first_column));
                                            console.log(`Error sintactico, se esperaba un token en esta linea ${_$[$0-1].first_line}, ${_$[$0-1].first_column}`);
                                            this.$=false;
                                        
break;
case 24:
this.$=null;
break;
case 26:
this.$=new print.default($$[$0-2], false,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 27:
this.$=new print.default($$[$0-2], true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 28:

            $$[$0-2].push($$[$0])
            this.$ = $$[$0-2]
        
break;
case 29:

            this.$ = [$$[$0]]
        
break;
case 30:
this.$= new declaracion.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 31:
this.$= new declaracion.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2]],$$[$0]);
break;
case 32:
this.$= new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 33:
this.$= new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 34:
this.$= new Tipo.default(Tipo.tipoDato.BOOLEANO);
break;
case 35:
this.$= new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 36:
this.$= new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 37:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 38: case 113: case 121:
this.$=[$$[$0]];
break;
case 39:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
this.$= new aritmeticas.default(aritmeticas.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 41:
this.$= new aritmeticas.default(aritmeticas.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 42:
this.$= new aritmeticas.default(aritmeticas.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 43:
this.$= new aritmeticas.default(aritmeticas.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 44:
this.$= new aritmeticas.default(aritmeticas.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$=new aritmeticas.default(aritmeticas.Operadores.MENOSNUM,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 47:
this.$= new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 48:
this.$= new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 49:
this.$= new relacional.default(relacional.Relacionales.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 50:
this.$= new relacional.default(relacional.Relacionales.MENOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 51:
this.$= new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 52:
this.$= new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 53:
this.$=new logicas.default(logicas.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 54:
this.$=new logicas.default(logicas.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 55:
this.$=new logicas.default(logicas.Logicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 56:
this.$= new unionCadenas.default(unionCadenas.Operadores.CONCATENACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 57:
this.$= new unionCadenas.default(unionCadenas.Operadores.DUPLICIDAD,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 59:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 61:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 62:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.BOOLEANO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 63:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0].replace(/['"]+/g, ""),_$[$0].first_line,_$[$0].first_column);
break;
case 64:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.NULO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 66:
this.$=new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 69:
this.$=new funcNativa.default($$[$0-2],$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,0,0);
break;
case 70:
this.$=new funcNativa.default($$[$0-3],$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-1],0);
break;
case 71:
this.$=new funcNativa.default($$[$0-5],$$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-3],$$[$0-1]);
break;
case 72:
this.$=new funcNativa.default($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 73:
this.$=new funcNativa.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,0,0); 
break;
case 74:
this.$=new funcNativa.default($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-1]); 
break;
case 75:
this.$=new funcNativa.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column,0,0); 
break;
case 76:
this.$= new condIf.default(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0],undefined,undefined);
break;
case 77:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-2],$$[$0],undefined);
break;
case 78:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-2],undefined,$$[$0]);
break;
case 79:
this.$=new condWhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 80:
this.$=new condDoWhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 81:
this.$=new condTernario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 82:
this.$=new condBreak.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 83:
this.$=new condContinue.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 84:
this.$=new condReturn.default(_$[$0].first_line,_$[$0].first_column); 
break;
case 85:
this.$=new condReturn.default(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]); 
break;
case 86:
this.$=new condSwitch.default(_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 87:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined);
break;
case 88:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],undefined,$$[$0-1]);
break;
case 91:
this.$=new condCase.default(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 92:
this.$=new condDefault.default(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 93:
this.$=new Incremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 94:
this.$=new Decremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 95:
this.$=new condFor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 101:
this.$=new main.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-4].first_line,_$[$0-4].first_column,$$[$0]);
break;
case 102:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 103:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],[],$$[$0]);
break;
case 104:
$$[$0-3].push({tipato:$$[$0-1],identificador:$$[$0]});this.$=$$[$0-3];
break;
case 105:
$$[$0-5].push({tipato:$$[$0-3],identificador:$$[$0],arreglo:true});this.$=$$[$0-5];
break;
case 106:
$$[$0-6].push({tipato:$$[$0-2],identificador:$$[$0],lista:true});this.$=$$[$0-6];
break;
case 107:
this.$=[{tipato:$$[$0-3],identificador:$$[$0],arreglo:true}];
break;
case 108:
this.$=[{tipato:$$[$0-2],identificador:$$[$0],lista:true}];
break;
case 109:
this.$=[{tipato:$$[$0-1],identificador:$$[$0]}];
break;
case 110:
this.$=new llamadas.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 111:
this.$=new llamadas.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 112: case 120:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 114:
this.$=new ejecucion.default($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 115:
this.$=new ejecucion.default($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 116:
this.$=new funciones.default($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 117:
this.$=new funciones.default($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],[],$$[$0]);
break;
case 118:
this.$=new vectores.default($$[$0-9],$$[$0-6],true,_$[$0-9].first_line,_$[$0-9].first_column,$$[$0-1],$$[$0-3]);
break;
case 119:
this.$=new vectores.default($$[$0-7],$$[$0-4],false,_$[$0-7].first_line,_$[$0-7].first_column,undefined,undefined,$$[$0-1]);
break;
case 122:
this.$=new accesoVector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 123:
this.$=new modiVector.default($$[$0-5], $$[$0-3], $$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 143:
this.$=[];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{1:[3]},{2:$V0,5:[1,72],6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,[2,3]),o($VI,[2,4]),o($VI,$VJ,{9:74,27:$VK}),o($VI,$VJ,{9:76,27:$VK}),o($VI,[2,7]),o($VI,[2,8]),o($VI,[2,9]),o($VI,[2,10]),o($VI,[2,11]),o($VI,$VJ,{9:77,27:$VK}),o($VI,[2,13]),o($VI,$VJ,{9:78,27:$VK}),o($VI,$VJ,{9:79,27:$VK}),o($VI,[2,16]),o($VI,[2,17]),o([2,5,28,29,32,37,39,40,41,42,43,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VJ,{9:80,27:$VK,44:$VL,45:$VL,46:$VL,47:$VL,48:$VL,49:$VL,50:$VL,51:$VL,52:$VL,53:$VL,54:$VL,55:$VL,56:$VL,58:$VL,59:$VL,71:$VL,79:$VL,92:$VL,93:$VL}),o($VI,$VJ,{9:81,27:$VK}),o($VI,[2,20]),o($VI,$VJ,{9:82,27:$VK}),o($VI,$VJ,{9:83,27:$VK}),o($VI,$VJ,{9:84,27:$VK}),{29:[1,85]},{29:[1,86]},{36:87,37:[1,88],67:[1,89],71:$VM},o($VN,$VO,{29:$VP,38:$VQ,67:[1,93]}),{29:[1,94]},{29:[1,95]},{75:96,85:$VR},o($VI,$VJ,{9:98,27:$VK}),o($VI,$VJ,{9:99,27:$VK}),o([2,5,27,28,32,74,77,78,81,82,83,84,88,90,91,94,98,103],[2,84],{60:47,70:55,72:56,34:100,22:102,35:103,29:$V2,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH}),{29:[1,104]},{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71,92:[1,105],93:[1,106]},{29:[1,124]},{37:[1,125]},{37:[1,126]},o($V81,$V91),o($Va1,[2,33]),o($V81,$Vb1),o($V81,$Vc1),o($Va1,[2,36]),{22:102,29:$V2,34:127,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:128,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:129,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,58]),o($Vd1,[2,59]),o($Vd1,[2,60]),o($Vd1,[2,61]),o($Vd1,[2,62]),o($Vd1,[2,63]),o($Vd1,[2,64]),{22:102,29:$V2,34:131,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:130,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,68]),{29:[1,133],71:[1,132]},o($Ve1,[2,124]),o($Ve1,[2,125]),o($Ve1,[2,126]),o($Ve1,[2,127]),o($Ve1,[2,128]),o($Ve1,[2,129]),o($Ve1,[2,130]),o($Ve1,[2,131]),o($Ve1,[2,132]),o($Ve1,[2,136]),o($Ve1,[2,137]),o($Ve1,[2,138]),o($Ve1,[2,139]),o($Ve1,[2,140]),o($Ve1,[2,141]),{1:[2,1]},o($VI,[2,2]),o($VI,[2,5]),o($VI,[2,24]),o($VI,[2,6]),o($VI,[2,12]),o($VI,[2,14]),o($VI,[2,15]),o($VI,[2,18]),o($VI,[2,19]),o($VI,[2,21]),o($VI,[2,22]),o($VI,[2,23]),{22:102,29:$V2,30:134,34:135,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,30:136,34:135,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vf1,[2,30],{33:[1,137]}),o([2,5,27,28,32,33,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vg1,{29:[1,139],38:$Vh1}),{69:[1,140]},{73:[1,141]},{22:102,29:$V2,34:142,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,31:[1,144],34:145,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,102:143,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:146,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:147,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:148,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{77:[1,149]},{2:$V0,4:150,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,88:[1,151],94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,[2,82]),o($VI,[2,83]),o($Vi1,[2,85],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),o([2,5,27,28,31,32,33,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,69,71,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VO,{29:$VP,67:$Vj1}),o($Vd1,$VL),{71:$VM},{22:102,29:$V2,34:153,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vk1,[2,93]),o($Vk1,[2,94]),{22:102,29:$V2,34:154,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:155,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:156,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:157,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:158,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:159,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:160,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:161,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:162,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:163,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:164,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:165,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:166,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:167,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:168,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{39:[1,170],41:[1,172],42:[1,171],72:169,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:173,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{8:175,10:176,35:177,37:[1,178],39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9,95:174},{29:[1,182]},{29:[1,183]},{31:[1,184],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($Vo1,[2,46],{71:$V61}),o($Vp1,[2,55],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,58:$V41,59:$V51,71:$V61}),{33:$Vq1,69:[1,185]},o($Vr1,[2,121],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{73:[1,187]},{22:102,29:$V2,34:188,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{31:[1,189],33:$Vs1},o($Vt1,[2,29],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{31:[1,191],33:$Vs1},{37:[1,192]},{22:102,29:$V2,34:193,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{31:[1,195],35:196,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9,100:194,101:$Vu1},{37:[1,198]},{29:[1,199]},o([2,5,27,28,29,31,32,37,39,40,41,42,43,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],[2,39],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{31:[1,200],33:$Vv1},o($Vd1,[2,111]),o($Vt1,[2,113],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,69:[1,202],71:$V61,79:$V71},{31:[1,203],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},{31:[1,204],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},{29:[1,205]},{2:$V0,6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,88:[1,206],94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vw1,[2,143]),{22:102,29:$V2,34:207,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{31:[1,208],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($Vx1,[2,40],{46:$VV,47:$VW,48:$VX,71:$V61}),o($Vx1,[2,41],{46:$VV,47:$VW,48:$VX,71:$V61}),o($Vo1,[2,42],{71:$V61}),o($Vo1,[2,43],{71:$V61}),o($Vo1,[2,44],{71:$V61}),o($Vy1,[2,47],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,48],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,49],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,50],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,51],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,52],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vp1,[2,53],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,58:$V41,59:$V51,71:$V61}),o([2,5,27,28,29,31,32,33,37,39,40,41,42,43,56,57,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],[2,54],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,58:$V41,59:$V51,71:$V61}),o($Vy1,[2,56],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),o($Vy1,[2,57],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,71:$V61}),{29:[1,209]},{29:[2,133]},{29:[2,134]},{29:[2,135]},{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71,80:[1,210]},o([29,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VJ,{9:211,27:$VK}),o($Vz1,[2,96]),o($Vz1,[2,97]),{36:87,37:[1,212]},{38:$VQ},o($VA1,$V91),o($VA1,$Vb1),o($VA1,$Vc1),{31:[1,214],35:196,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9,100:213,101:$Vu1},{22:102,29:$V2,31:[1,216],34:145,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,102:215,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,45]),o($Vd1,[2,65]),{22:102,29:$V2,34:217,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{29:[1,218]},{31:[1,219],33:[1,220],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($VI,$VJ,{9:221,27:$VK}),{22:102,29:$V2,34:222,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,$VJ,{9:223,27:$VK}),o([2,5,27,28,29,32,33,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,74,77,78,81,82,83,84,88,90,91,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],[2,37]),o($Vi1,[2,31],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{31:[1,224],33:$VB1},{75:226,85:$VR},{37:[1,228],67:[1,227]},{52:[1,229]},{38:[1,230]},{22:102,29:$V2,34:231,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,110]),{22:102,29:$V2,34:232,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VN,$VC1,{38:[1,233]}),{75:234,85:$VR},{75:235,85:$VR},{22:102,29:$V2,34:236,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vw1,[2,142]),{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,69:[1,237],71:$V61,79:$V71},{85:[1,238]},{22:102,29:$V2,31:[1,239],34:240,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:241,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{22:102,29:$V2,34:242,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o([27,29,33,37,39,40,41,42,43,45,57,61,62,63,64,65,66,67,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vg1,{38:$Vh1}),{31:[1,243],33:$VB1},{75:244,85:$VR},{31:[1,245],33:$Vv1},o($Vf1,[2,115]),o($Vr1,[2,120],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{22:102,29:$V2,34:246,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,73]),{22:102,29:$V2,34:247,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,[2,26]),o($Vt1,[2,28],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),o($VI,[2,27]),{75:248,85:$VR},{35:249,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9,101:[1,250]},o($VI,[2,117]),{69:[1,251]},o($Vt1,[2,109]),{35:252,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9},{67:[1,254],104:[1,253]},{31:[1,255],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($Vt1,[2,112],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{22:102,29:$V2,34:256,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,[2,76],{76:[1,257]}),o($VI,[2,79]),{31:[1,258],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($Vd1,$VC1),{86:259,87:260,89:261,90:$VD1,91:$VE1},o($Vd1,[2,69]),{31:[1,264],33:[1,265],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o([2,5,27,28,29,31,32,33,37,39,40,41,42,43,57,61,62,63,64,65,66,67,69,74,77,78,79,80,81,82,83,84,88,90,91,92,93,94,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],[2,81],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61}),o([29,37,39,40,41,42,43,57,61,62,63,64,65,66,67,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$VJ,{9:266,27:$VK,44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{75:267,85:$VR},o($VI,[2,103]),o($Vf1,[2,114]),{31:[1,268],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},{31:[1,269],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},o($VI,[2,116]),{37:[1,270],67:[1,271]},{52:[1,272]},{37:[1,273]},{51:[1,274]},{35:275,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9},{22:102,29:$V2,34:131,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:276,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,75]),o($Vi1,[2,123],{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71}),{11:278,74:$Vj,75:277,85:$VR},o($VI,$VJ,{9:279,27:$VK}),{87:280,88:[1,281],89:282,90:$VD1,91:$VE1},{88:[1,283]},o($VF1,[2,90]),{80:[1,284]},{22:102,29:$V2,34:285,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,70]),{22:102,29:$V2,34:286,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{10:290,18:288,19:289,22:102,29:$V2,34:35,35:103,37:[1,291],39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,96:287,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($VI,[2,102]),o($Vd1,[2,72]),o($Vd1,[2,74]),o($Vt1,[2,104]),{69:[1,292]},{35:293,39:$Vl1,40:$V6,41:$Vm1,42:$Vn1,43:$V9},o($Vt1,[2,107]),{37:[1,294]},{67:[1,295]},{33:$Vq1,69:[1,296]},o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,80]),{88:[1,297]},o($VI,[2,87]),o($VF1,[2,89]),o($VI,[2,88]),{2:$V0,4:298,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71,80:[1,299]},{31:[1,300],44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,71:$V61,79:$V71},{31:[1,301]},{31:[2,98]},{31:[2,99]},{31:[2,100]},o($VN,$VO,{29:$VP,38:$VQ,67:$Vj1}),{37:[1,302]},{51:[1,303]},o($Vt1,[2,108]),{22:102,29:$V2,34:304,35:103,37:$VS,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vf1,[2,119]),o($VI,[2,86]),{2:$V0,6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,88:[2,92],94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},{2:$V0,4:305,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,28:$V1,29:$V2,32:$V3,34:35,35:26,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,60:47,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,70:55,72:56,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH},o($Vd1,[2,71]),{75:306,85:$VR},o($Vt1,[2,105]),{37:[1,307]},{44:$VT,45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,58:$V41,59:$V51,69:[1,308],71:$V61,79:$V71},o($VF1,[2,91],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,35:26,34:35,60:47,70:55,72:56,6:73,2:$V0,28:$V1,29:$V2,32:$V3,37:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,45:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,74:$Vj,77:$Vk,78:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,94:$Vq,98:$Vr,103:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH}),o($VI,[2,95]),o($Vt1,[2,106]),o($Vf1,[2,118])],
defaultActions: {72:[2,1],170:[2,133],171:[2,134],172:[2,135],288:[2,98],289:[2,99],290:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//codigo js
const print=require('./Instrucciones/print');
const primitivo= require('./Expresiones/Primitivo');
const errores= require('./Excepciones/Errores');
const inicio= require('./Excepciones/Listado_Errores');
const aritmeticas= require('./Expresiones/Aritmetica');
const unionCadenas= require('./Expresiones/Cadenas');
const Tipo= require('./TS/Tipo');
const logicas= require("./Expresiones/Logica");
const relacional= require("./Expresiones/Relacional");
const declaracion= require("./Instrucciones/Declaracion");
const identificador=require("./Expresiones/Identificador");
const asignacion= require("./Instrucciones/Asignacion");
const condIf= require("./Instrucciones/Condicionales/condIf");
const condWhile= require("./Instrucciones/Ciclicas/condWhile");
const condDoWhile = require("./Instrucciones/Ciclicas/condDoWhile");
const condTernario= require("./Instrucciones/Condicionales/condIfTernario");
const condBreak= require("./Instrucciones/Break");
const condContinue= require("./Instrucciones/Continue");
const condReturn= require("./Instrucciones/Return");
const condSwitch= require("./Instrucciones/Condicionales/condSwitch");
const condDefault= require("./Instrucciones/Condicionales/condSwitchDefault");
const condCase= require("./Instrucciones/Condicionales/condSwitchCase");
const Incremento= require("./Instrucciones/Incremento");
const Decremento= require("./Instrucciones/Decremento");
const condFor= require("./Instrucciones/Ciclicas/condFor");
const metodos= require("./Instrucciones/Metodos");
const llamadas= require("./Instrucciones/LlamadaFuncMetd");
const ejecucion= require("./Instrucciones/Exec");
const funciones= require("./Instrucciones/Funciones");
const vectores=require('./Instrucciones/declaracionVectores');
const accesoVector= require('./Instrucciones/accesoVector');
const modiVector = require('./Instrucciones/asignacionVector');
const listas = require('./Instrucciones/declaracionListas');
const accesoLista = require('./Instrucciones/accesoLista');
const modiLista = require('./Instrucciones/asignacionLista');
const agregarLista= require('./Instrucciones/agregarLista');
const funcNativa= require('./Instrucciones/funcNativa');
const casteo= require('./Instrucciones/casteo');
const main = require('./Instrucciones/Main')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 74;
break;
case 5:return 76;
break;
case 6:return 28;
break;
case 7:return 32;
break;
case 8:return 66
break;
case 9:return 39;
break;
case 10:return 40;
break;
case 11:return 42;
break;
case 12:return 41;
break;
case 13:return 43;
break;
case 14:return 77;
break;
case 15:return 78;
break;
case 16:return 81;
break;
case 17:return 82;
break;
case 18:return 83;
break;
case 19:return 84;
break;
case 20:return 90;
break;
case 21:return 91;
break;
case 22:return 94;
break;
case 23:return 98;
break;
case 24:return 103;
break;
case 25:return 104;
break;
case 26:return 101;
break;
case 27:return 'RESADD';
break;
case 28:return 105; //listoEnClase
break;
case 29:return 106; //listoEnClase
break;
case 30:return 107; //listoEnClase
break;
case 31:return 108;//enGramatica
break;
case 32:return 112;//enGramatica
break;
case 33:return 113;//enGramatica
break;
case 34:return 73;
break;
case 35:return 110; //enGramatica
break;
case 36:return 111; //enGramatica
break;
case 37:return 109; //listo
break;
case 38:return 114;
break;
case 39:return 115;
break;
case 40:return 116;
break;
case 41:return 117;
break;
case 42:return 118;
break;
case 43:return 119;
break;
case 44:return 85;
break;
case 45:return 33;
break;
case 46:return 88;
break;
case 47:return 56;
break;
case 48:return 55;
break;
case 49:return 58
break;
case 50:return 27;
break;
case 51:return 29;
break;
case 52:return 31;
break;
case 53:return 67;
break;
case 54:return 69;
break;
case 55:return 92
break;
case 56:return 44;
break;
case 57:return 93
break;
case 58:return 45;
break;
case 59:return 47;
break;
case 60:return 46;
break;
case 61:return 48;
break;
case 62:return 49;
break;
case 63:return 54;
break;
case 64:return 53;
break;
case 65:return 38;
break;
case 66:return 50;
break;
case 67:return 57;
break;
case 68:return 52;
break;
case 69:return 51;
break;
case 70:return 59;
break;
case 71:return 79;
break;
case 72:return 80;
break;
case 73:return 71;
break;
case 74: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 75:return 62;
break;
case 76:return 61;
break;
case 77:return 65;
break;
case 78:return 64;
break;
case 79:return 37;
break;
case 80:return 5;
break;
case 81:console.log("error Lexico")
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:exec\b)/,/^(?:new\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:length\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:string\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:sin\b)/,/^(?:log10\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:pow\b)/,/^(?:\{)/,/^(?:,)/,/^(?:\})/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'[^\']')/,/^(?:(true|false)\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}