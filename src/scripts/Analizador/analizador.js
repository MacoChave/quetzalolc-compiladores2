/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,25],$V2=[1,45],$V3=[1,26],$V4=[1,28],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,43],$V9=[1,44],$Va=[1,46],$Vb=[1,47],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[1,35],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[2,5,28,29,32,36,38,39,40,41,42,44,56,60,61,62,63,64,65,66,73,76,77,80,81,82,83,87,89,90,93,96,100,102,103,104,105,106,107],$VA=[43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,78,91,92],$VB=[2,64],$VC=[1,81],$VD=[2,63],$VE=[1,83],$VF=[1,82],$VG=[1,88],$VH=[1,92],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,108],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[1,113],$VY=[36,50,66,71],$VZ=[9,31,33,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,68,78,79,91,92],$V_=[2,29],$V$=[1,127],$V01=[1,141],$V11=[9,31],$V21=[9,31,33,54,55,68,78,79,91,92],$V31=[1,169],$V41=[33,68],$V51=[1,172],$V61=[31,33],$V71=[1,178],$V81=[1,182],$V91=[2,5,28,29,32,36,38,39,40,41,42,44,56,60,61,62,63,64,65,66,73,75,76,77,80,81,82,83,87,89,90,93,96,100,102,103,104,105,106,107],$Va1=[9,31,33,43,44,48,49,50,51,52,53,54,55,57,58,68,78,79,91,92],$Vb1=[9,31,33,48,49,50,51,52,53,54,55,57,58,68,78,79,91,92],$Vc1=[1,204],$Vd1=[2,113],$Ve1=[1,239],$Vf1=[1,238],$Vg1=[87,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"DECLARACION":8,"PTCOMA":9,"ASIGNACION":10,"CONDICIONIF":11,"CONDICIONWHILE":12,"CONDICIONDOWHILE":13,"CONDBREAK":14,"CODCONTINUE":15,"CONDRETURN":16,"CONDSWITCH":17,"CONDINCREMENTO":18,"CONDECREMENTO":19,"CONDFOR":20,"METODOS":21,"LLAMADA":22,"EJECUTAR":23,"FUNCIONES":24,"VECTORES":25,"ASIGVECTORES":26,"FUNCMAIN":27,"RESPRINT":28,"PARABRE":29,"IMPRIMIR_ARGS":30,"PARCIERRA":31,"RESPRINTLN":32,"COMA":33,"EXPRESION":34,"TIPODATO":35,"IDENTIFICADOR":36,"IGUAL":37,"RESINT":38,"RESCHAR":39,"RESBOOL":40,"RESDOUBLE":41,"RESSTRING":42,"MAS":43,"MENOS":44,"POR":45,"DIVI":46,"MOD":47,"COMPARACION":48,"DIFERENTE":49,"MAYOR":50,"MENOR":51,"MAYORIGUAL":52,"MENORIGUAL":53,"AND":54,"OR":55,"NOT":56,"CONCAD":57,"DUPLI":58,"IFTERNARIO":59,"ENTERO":60,"DECIMAL":61,"CADENA":62,"BOOLEANO":63,"CARACTER":64,"RESNULO":65,"CORCHABRE":66,"LISTAVALORES":67,"CORCHCIERRA":68,"ACCESOVECTOR":69,"FUNCNATIVA":70,"PUNTO":71,"RESPARSE":72,"RESIF":73,"BLOQUEINSTRUCCION":74,"RESELSE":75,"RESWHILE":76,"RESDO":77,"INTERROGACION":78,"DOSPUNTOS":79,"RESBREAK":80,"RESCONTINUE":81,"RESRETURN":82,"RESSWITCH":83,"LLAVEABRE":84,"LISTACASOS":85,"DEFECTO":86,"LLAVECIERRA":87,"CASO":88,"RESCASE":89,"RESDEFAULT":90,"MASINC":91,"MENOSDES":92,"RESFOR":93,"DECLASIG":94,"ACTUALIZACION":95,"RESVOID":96,"PARAMETROS":97,"RESLIST":98,"PARLLAMADA":99,"RESEXEC":100,"RESNUEVO":101,"RESLOW":102,"RESUP":103,"RESLENG":104,"RESTRUN":105,"RESROUND":106,"RESTYPE":107,"RESMAIN":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",28:"RESPRINT",29:"PARABRE",31:"PARCIERRA",32:"RESPRINTLN",33:"COMA",36:"IDENTIFICADOR",37:"IGUAL",38:"RESINT",39:"RESCHAR",40:"RESBOOL",41:"RESDOUBLE",42:"RESSTRING",43:"MAS",44:"MENOS",45:"POR",46:"DIVI",47:"MOD",48:"COMPARACION",49:"DIFERENTE",50:"MAYOR",51:"MENOR",52:"MAYORIGUAL",53:"MENORIGUAL",54:"AND",55:"OR",56:"NOT",57:"CONCAD",58:"DUPLI",60:"ENTERO",61:"DECIMAL",62:"CADENA",63:"BOOLEANO",64:"CARACTER",65:"RESNULO",66:"CORCHABRE",68:"CORCHCIERRA",71:"PUNTO",72:"RESPARSE",73:"RESIF",75:"RESELSE",76:"RESWHILE",77:"RESDO",78:"INTERROGACION",79:"DOSPUNTOS",80:"RESBREAK",81:"RESCONTINUE",82:"RESRETURN",83:"RESSWITCH",84:"LLAVEABRE",87:"LLAVECIERRA",89:"RESCASE",90:"RESDEFAULT",91:"MASINC",92:"MENOSDES",93:"RESFOR",96:"RESVOID",98:"RESLIST",100:"RESEXEC",101:"RESNUEVO",102:"RESLOW",103:"RESUP",104:"RESLENG",105:"RESTRUN",106:"RESROUND",107:"RESTYPE",108:"RESMAIN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[7,5],[7,5],[30,3],[30,1],[8,2],[8,4],[35,1],[35,1],[35,1],[35,1],[35,1],[10,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,1],[34,1],[34,1],[34,4],[34,6],[11,5],[11,7],[11,7],[12,5],[13,7],[59,5],[14,2],[15,2],[16,1],[16,2],[17,8],[17,7],[17,7],[85,2],[85,1],[88,4],[86,3],[18,2],[19,2],[20,9],[94,1],[94,1],[95,1],[95,1],[95,1],[21,6],[21,5],[97,4],[97,6],[97,7],[97,4],[97,5],[97,2],[22,4],[22,3],[99,3],[99,1],[23,5],[23,4],[24,6],[24,5],[25,10],[25,8],[67,3],[67,1],[69,4],[26,6],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[74,3],[74,2],[27,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 81:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 82:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 13: case 16: case 17: case 20: case 55: case 64: case 65: case 88: case 89: case 90: case 91: case 92: case 115: case 116: case 117: case 118: case 119: case 120:
this.$=$$[$0];
break;
case 5: case 6: case 12: case 14: case 15: case 18: case 19: case 21: case 22: case 23: case 42: case 62: case 121:
this.$=$$[$0-1];
break;
case 24:

                                            // inicio.listaErrores.push(new errores.default('ERROR SINTACTICO',"Se esperaba un token en esta linea",_$[$0-1].first_line,_$[$0-1].first_column));
                                            console.log(`Error sintactico, se esperaba un token en esta linea ${_$[$0-1].first_line}, ${_$[$0-1].first_column}`);
                                            this.$=false;
                                        
break;
case 25:
this.$=new print.default($$[$0-2], false,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 26:
this.$=new print.default($$[$0-2], true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 27:

            $$[$0-2].push($$[$0])
            this.$ = $$[$0-2]
        
break;
case 28:

            this.$ = [$$[$0]]
        
break;
case 29:
this.$= new declaracion.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 30:
this.$= new declaracion.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 31:
this.$= new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 32:
this.$= new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 33:
this.$= new Tipo.default(Tipo.tipoDato.BOOLEANO);
break;
case 34:
this.$= new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 35:
this.$= new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 36:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
this.$= new aritmeticas.default(aritmeticas.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 38:
this.$= new aritmeticas.default(aritmeticas.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 39:
this.$= new aritmeticas.default(aritmeticas.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 40:
this.$= new aritmeticas.default(aritmeticas.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 41:
this.$= new aritmeticas.default(aritmeticas.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 43:
this.$=new aritmeticas.default(aritmeticas.Operadores.MENOSNUM,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 44:
this.$= new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 45:
this.$= new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$= new relacional.default(relacional.Relacionales.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 47:
this.$= new relacional.default(relacional.Relacionales.MENOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 48:
this.$= new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 49:
this.$= new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 50:
this.$=new logicas.default(logicas.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 51:
this.$=new logicas.default(logicas.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 52:
this.$=new logicas.default(logicas.Logicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 53:
this.$= new unionCadenas.default(unionCadenas.Operadores.CONCATENACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 54:
this.$= new unionCadenas.default(unionCadenas.Operadores.DUPLICIDAD,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 56:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.BOOLEANO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0].replace(/['"]+/g, ""),_$[$0].first_line,_$[$0].first_column);
break;
case 61:
this.$= new primitivo.default(new Tipo.default(Tipo.tipoDato.NULO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 63:
this.$=new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 66:
this.$=new funcNativa.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 67:
this.$=new funcNativa.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 68:
this.$= new condIf.default(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0],undefined,undefined);
break;
case 69:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-2],$$[$0],undefined);
break;
case 70:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-2],undefined,$$[$0]);
break;
case 71:
this.$=new condWhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 72:
this.$=new condDoWhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 73:
this.$=new condTernario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 74:
this.$=new condBreak.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 75:
this.$=new condContinue.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 76:
this.$=new condReturn.default(_$[$0].first_line,_$[$0].first_column); 
break;
case 77:
this.$=new condReturn.default(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]); 
break;
case 78:
this.$=new condSwitch.default(_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 79:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined);
break;
case 80:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],undefined,$$[$0-1]);
break;
case 83:
this.$=new condCase.default(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 84:
this.$=new condDefault.default(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 85:
this.$=new Incremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 86:
this.$=new Decremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 87:
this.$=new condFor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 93:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 94:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],[],$$[$0]);
break;
case 95:
$$[$0-3].push({tipato:$$[$0-1],identificador:$$[$0]});this.$=$$[$0-3];
break;
case 96:
$$[$0-5].push({tipato:$$[$0-3],identificador:$$[$0],arreglo:true});this.$=$$[$0-5];
break;
case 97:
$$[$0-6].push({tipato:$$[$0-2],identificador:$$[$0],lista:true});this.$=$$[$0-6];
break;
case 98:
this.$=[{tipato:$$[$0-3],identificador:$$[$0],arreglo:true}];
break;
case 99:
this.$=[{tipato:$$[$0-2],identificador:$$[$0],lista:true}];
break;
case 100:
this.$=[{tipato:$$[$0-1],identificador:$$[$0]}];
break;
case 101:
this.$=new llamadas.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 102:
this.$=new llamadas.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 103: case 111:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 104: case 112:
this.$=[$$[$0]];
break;
case 105:
this.$=new ejecucion.default($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 106:
this.$=new ejecucion.default($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 107:
this.$=new funciones.default($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 108:
this.$=new funciones.default($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],[],$$[$0]);
break;
case 109:
this.$=new vectores.default($$[$0-9],$$[$0-6],true,_$[$0-9].first_line,_$[$0-9].first_column,$$[$0-1],$$[$0-3]);
break;
case 110:
this.$=new vectores.default($$[$0-7],$$[$0-4],false,_$[$0-7].first_line,_$[$0-7].first_column,undefined,undefined,$$[$0-1]);
break;
case 113:
this.$=new accesoVector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 114:
this.$=new modiVector.default($$[$0-5], $$[$0-3], $$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 122:
this.$=[];
break;
case 123:
this.$=new main.default($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{1:[3]},{2:$V0,5:[1,64],6:65,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vz,[2,3]),o($Vz,[2,4]),{9:[1,66]},{9:[1,67]},o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),{9:[1,68]},o($Vz,[2,13]),{9:[1,69]},{9:[1,70]},o($Vz,[2,16]),o($Vz,[2,17]),o($VA,$VB,{9:[1,71]}),{9:[1,72]},o($Vz,[2,20]),{9:[1,73]},{9:[1,74]},{9:[1,75]},{9:[1,76]},{29:[1,77]},{29:[1,78]},{36:[1,79],66:[1,80],71:$VC},o($VA,$VD,{29:$VE,37:$VF,66:[1,84]}),{29:[1,85]},{29:[1,86]},{74:87,84:$VG},{9:[1,89]},{9:[1,90]},{9:[2,76],22:93,29:$V2,34:91,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{29:[1,95]},{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX,91:[1,96],92:[1,97]},{29:[1,114]},{36:[1,115],108:[1,116]},{36:[1,117]},o($VY,[2,31]),o($VY,[2,32]),o($VY,[2,33]),o($VY,[2,34]),o($VY,[2,35]),{22:93,29:$V2,34:118,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:119,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:120,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VZ,[2,55]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,58]),o($VZ,[2,59]),o($VZ,[2,60]),o($VZ,[2,61]),{22:93,29:$V2,34:122,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:121,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VZ,[2,65]),{29:[1,123]},{29:[2,115]},{29:[2,116]},{29:[2,117]},{29:[2,118]},{29:[2,119]},{29:[2,120]},{1:[2,1]},o($Vz,[2,2]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,12]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,18]),o($Vz,[2,19]),o($Vz,[2,21]),o($Vz,[2,22]),o($Vz,[2,23]),o($Vz,[2,24]),{22:93,29:$V2,30:124,34:125,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,30:126,34:125,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{9:$V_,29:[1,128],37:$V$},{68:[1,129]},{72:[1,130]},{22:93,29:$V2,34:131,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,31:[1,133],34:134,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,99:132,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:135,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:136,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:137,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{76:[1,138]},{2:$V0,4:139,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,87:[1,140],93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vz,[2,74]),o($Vz,[2,75]),{9:[2,77],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},o($VZ,$VD,{29:$VE,66:$V01}),o($VZ,$VB),{71:$VC},{22:93,29:$V2,34:142,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V11,[2,85]),o($V11,[2,86]),{22:93,29:$V2,34:143,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:144,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:145,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:146,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:147,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:148,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:149,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:150,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:151,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:152,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:153,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:154,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:155,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:156,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:157,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:158,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{8:160,10:161,35:162,36:[1,163],38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,94:159},{29:[1,164]},{29:[1,165]},{29:[1,166]},{31:[1,167],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},o($VZ,[2,43]),o($V21,[2,52],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,57:$VV,58:$VW}),{33:$V31,68:[1,168]},o($V41,[2,112],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),{22:93,29:$V2,34:170,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{31:[1,171],33:$V51},o($V61,[2,28],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),{31:[1,173],33:$V51},{22:93,29:$V2,34:174,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{31:[1,176],35:177,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,97:175,98:$V71},{36:[1,179]},{29:[1,180]},o($V11,[2,36],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),{31:[1,181],33:$V81},o($VZ,[2,102]),o($V61,[2,104],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,68:[1,183],78:$VX},{31:[1,184],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{31:[1,185],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{29:[1,186]},{2:$V0,6:65,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,87:[1,187],93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V91,[2,122]),{22:93,29:$V2,34:188,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{31:[1,189],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},o($Va1,[2,37],{45:$VK,46:$VL,47:$VM}),o($Va1,[2,38],{45:$VK,46:$VL,47:$VM}),o($VZ,[2,39]),o($VZ,[2,40]),o($VZ,[2,41]),o($Vb1,[2,44],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,45],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,46],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,47],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,48],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,49],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($V21,[2,50],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,57:$VV,58:$VW}),o([9,31,33,55,68,78,79,91,92],[2,51],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,57:$VV,58:$VW}),o($Vb1,[2,53],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),o($Vb1,[2,54],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM}),{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX,79:[1,190]},{9:[1,191]},{9:[2,88]},{9:[2,89]},{36:[1,192]},{37:$VF},{31:[1,194],35:177,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,97:193,98:$V71},{31:[1,195]},{22:93,29:$V2,31:[1,197],34:134,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,99:196,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VZ,[2,42]),o($VZ,[2,62]),{22:93,29:$V2,34:198,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{31:[1,199],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{9:[1,200]},{22:93,29:$V2,34:201,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{9:[1,202]},{9:[2,30],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{31:[1,203],33:$Vc1},{74:205,84:$VG},{36:[1,207],66:[1,206]},{51:[1,208]},{37:[1,209]},{22:93,29:$V2,34:210,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VZ,[2,101]),{22:93,29:$V2,34:211,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VA,$Vd1,{37:[1,212]}),{74:213,84:$VG},{74:214,84:$VG},{22:93,29:$V2,34:215,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V91,[2,121]),{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,68:[1,216],78:$VX},{84:[1,217]},{22:93,29:$V2,34:218,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:93,29:$V2,34:219,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{9:$V_,37:$V$},{31:[1,220],33:$Vc1},{74:221,84:$VG},{84:[1,222]},{31:[1,223],33:$V81},{9:[2,106]},o($V41,[2,111],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),o($VZ,[2,66]),o($Vz,[2,25]),o($V61,[2,27],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),o($Vz,[2,26]),{74:224,84:$VG},{35:225,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,98:[1,226]},o($Vz,[2,108]),{68:[1,227]},o($V61,[2,100]),{35:228,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{66:[1,230],101:[1,229]},{31:[1,231],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},o($V61,[2,103],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX}),{22:93,29:$V2,34:232,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vz,[2,68],{75:[1,233]}),o($Vz,[2,71]),{31:[1,234],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},o($VZ,$Vd1),{85:235,86:236,88:237,89:$Ve1,90:$Vf1},o([9,31,33,68,78,79,91,92],[2,73],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW}),{9:[1,240],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{74:241,84:$VG},o($Vz,[2,94]),{2:$V0,4:242,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{9:[2,105]},o($Vz,[2,107]),{36:[1,243],66:[1,244]},{51:[1,245]},{36:[1,246]},{50:[1,247]},{35:248,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{22:93,29:$V2,34:122,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:249,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VZ,[2,67]),{9:[2,114],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX},{11:251,73:$Vj,74:250,84:$VG},{9:[1,252]},{86:253,87:[1,254],88:255,89:$Ve1,90:$Vf1},{87:[1,256]},o($Vg1,[2,82]),{79:[1,257]},{22:93,29:$V2,34:258,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{10:262,18:260,19:261,22:93,29:$V2,34:36,35:94,36:[1,263],38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,95:259,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vz,[2,93]),{2:$V0,6:65,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,87:[1,264],93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V61,[2,95]),{68:[1,265]},{35:266,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},o($V61,[2,98]),{36:[1,267]},{66:[1,268]},{33:$V31,68:[1,269]},o($Vz,[2,69]),o($Vz,[2,70]),o($Vz,[2,72]),{87:[1,270]},o($Vz,[2,79]),o($Vg1,[2,81]),o($Vz,[2,80]),{2:$V0,4:271,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,78:$VX,79:[1,272]},{31:[1,273]},{31:[2,90]},{31:[2,91]},{31:[2,92]},o($VA,$VD,{29:$VE,37:$VF,66:$V01}),{9:[2,123]},{36:[1,274]},{50:[1,275]},o($V61,[2,99]),{22:93,29:$V2,34:276,35:94,36:$VH,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{9:[2,110]},o($Vz,[2,78]),{2:$V0,6:65,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,87:[2,84],93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{2:$V0,4:277,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V1,29:$V2,32:$V3,34:36,35:27,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,59:48,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,69:56,70:57,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{74:278,84:$VG},o($V61,[2,96]),{36:[1,279]},{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,57:$VV,58:$VW,68:[1,280],78:$VX},o($Vg1,[2,83],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,35:27,34:36,59:48,69:56,70:57,6:65,2:$V0,28:$V1,29:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,73:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,93:$Vq,96:$Vr,100:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy}),o($Vz,[2,87]),o($V61,[2,97]),{9:[2,109]}],
defaultActions: {58:[2,115],59:[2,116],60:[2,117],61:[2,118],62:[2,119],63:[2,120],64:[2,1],160:[2,88],161:[2,89],197:[2,106],223:[2,105],260:[2,90],261:[2,91],262:[2,92],264:[2,123],269:[2,110],280:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//codigo js
const print=require('./Instrucciones/print');
const primitivo= require('./Expresiones/Primitivo');
const errores= require('./Excepciones/Errores');
const inicio= require('./Excepciones/Listado_Errores');
const aritmeticas= require('./Expresiones/Aritmetica');
const unionCadenas= require('./Expresiones/Cadenas');
const Tipo= require('./TS/Tipo');
const logicas= require("./Expresiones/Logica");
const relacional= require("./Expresiones/Relacional");
const declaracion= require("./Instrucciones/Declaracion");
const identificador=require("./Expresiones/Identificador");
const asignacion= require("./Instrucciones/Asignacion");
const condIf= require("./Instrucciones/Condicionales/condIf");
const condWhile= require("./Instrucciones/Ciclicas/condWhile");
const condDoWhile = require("./Instrucciones/Ciclicas/condDoWhile");
const condTernario= require("./Instrucciones/Condicionales/condIfTernario");
const condBreak= require("./Instrucciones/Break");
const condContinue= require("./Instrucciones/Continue");
const condReturn= require("./Instrucciones/Return");
const condSwitch= require("./Instrucciones/Condicionales/condSwitch");
const condDefault= require("./Instrucciones/Condicionales/condSwitchDefault");
const condCase= require("./Instrucciones/Condicionales/condSwitchCase");
const Incremento= require("./Instrucciones/Incremento");
const Decremento= require("./Instrucciones/Decremento");
const condFor= require("./Instrucciones/Ciclicas/condFor");
const metodos= require("./Instrucciones/Metodos");
const llamadas= require("./Instrucciones/LlamadaFuncMetd");
const ejecucion= require("./Instrucciones/Exec");
const funciones= require("./Instrucciones/Funciones");
const vectores=require('./Instrucciones/declaracionVectores');
const accesoVector= require('./Instrucciones/accesoVector');
const modiVector = require('./Instrucciones/asignacionVector');
const listas = require('./Instrucciones/declaracionListas');
const accesoLista = require('./Instrucciones/accesoLista');
const modiLista = require('./Instrucciones/asignacionLista');
const agregarLista= require('./Instrucciones/agregarLista');
const funcNativa= require('./Instrucciones/funcNativa');
const casteo= require('./Instrucciones/casteo');
const main = require('./Instrucciones/Main')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 73;
break;
case 5:return 75;
break;
case 6:return 28;
break;
case 7:return 32;
break;
case 8:return 65
break;
case 9:return 38;
break;
case 10:return 39;
break;
case 11:return 41;
break;
case 12:return 40;
break;
case 13:return 42;
break;
case 14:return 76;
break;
case 15:return 77;
break;
case 16:return 80;
break;
case 17:return 81;
break;
case 18:return 82;
break;
case 19:return 108;
break;
case 20:return 83;
break;
case 21:return 89;
break;
case 22:return 90;
break;
case 23:return 93;
break;
case 24:return 96;
break;
case 25:return 101;
break;
case 26:return 98;
break;
case 27:return 'RESADD';
break;
case 28:return 102; //listo
break;
case 29:return 103; //listo
break;
case 30:return 104; //listo
break;
case 31:return 'RESCAROFPOS';
break;
case 32:return 'RESSUBSTRING';
break;
case 33:return 72;
break;
case 34:return 'RESTOINT'; //listo
break;
case 35:return 'RESTODOU';
break;
case 36:return 107; //listo
break;
case 37:return 84;
break;
case 38:return 33;
break;
case 39:return 87;
break;
case 40:return 55;
break;
case 41:return 54;
break;
case 42:return 57
break;
case 43:return 9;
break;
case 44:return 29;
break;
case 45:return 31;
break;
case 46:return 66;
break;
case 47:return 68;
break;
case 48:return 91
break;
case 49:return 43;
break;
case 50:return 92
break;
case 51:return 44;
break;
case 52:return 46;
break;
case 53:return 45;
break;
case 54:return 47;
break;
case 55:return 48;
break;
case 56:return 53;
break;
case 57:return 52;
break;
case 58:return 37;
break;
case 59:return 49;
break;
case 60:return 56;
break;
case 61:return 51;
break;
case 62:return 50;
break;
case 63:return 58;
break;
case 64:return 78;
break;
case 65:return 79;
break;
case 66:return 71;
break;
case 67: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 68:return 61;
break;
case 69:return 60;
break;
case 70:return 64;
break;
case 71:return 63;
break;
case 72:return 36;
break;
case 73:return 5;
break;
case 74:console.log("error Lexico")
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:main\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:length\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:substring\b)/i,/^(?:parse\b)/i,/^(?:toint\b)/i,/^(?:todouble\b)/i,/^(?:typeof\b)/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\})/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:&)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'[^\']')/i,/^(?:(true|false)\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}